{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about-me/","title":"About Me","text":""},{"location":"github-stats/","title":"GitHub Stats","text":"<p>Generated using lowlighter/metrics, platane/snk, and jstrieb/github-stats via GitHub Actions</p>"},{"location":"projects/","title":"Projects","text":""},{"location":"support/","title":"Support","text":""},{"location":"projects/pi-apps-cli/","title":"Pi-Apps CLI","text":"<p>Project Homepage: https://github.com/ryanfortner/pi-apps-cli.git</p> <p></p> <p>Pi-Apps CLI is a command-line client for Pi-Apps, the Raspberry Pi app store. It has many useful functions and is still under development.</p>"},{"location":"reference/","title":"Reference","text":"<p>Here are some links to some of my most used applications and sites as well as some simple programs to help me get things done.</p> <p>Click on the pages in the navbar.</p>"},{"location":"reference/c-programming/","title":"C Programming","text":"<p>This is my page for posting code snippets from the C language. Want to see more examples? Visit my Learning-C repo.</p>"},{"location":"reference/c-programming/#hello-world","title":"Hello World","text":"<p>Every programmer's first program. <pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"Hello, world!\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#escape-sequences","title":"Escape Sequences","text":"<p>Printing C's different escape sequences. <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, world without a new line!\");\n    printf(\"Hello, world with a new line!\\n\");\n    printf(\"A string with \\\"quoted text\\\" inside of it\\n\");\n    printf(\"Tabbed\\tColumn\\tHeadings\\n\");\n    printf(\"The\\tquick\\tbrown\\n\");\n    printf(\"fox\\tjumps\\tover\\n\");\n    printf(\"the\\tlazy\\tdog\\n\\n\");\n    printf(\"A line of text that \\nspans three lines \\nand completes the line \\n\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#operators","title":"Operators","text":"<p>Example program using different types of operators in C. <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    int a = 2;\n    int b;\n\n    // arithmetic operators\n    b = a++; // b is 2, a is 3\n    b = ++a; // b is 4, a is 4\n    printf(\"a is %d, b is %d\\n\", a, b);\n    printf(\"a * b = %d\\n\", a * b);\n    printf(\"a + b = %d\\n\", a + b);\n    printf(\"a - b = %d\\n\", a - b);\n    printf(\"a / b = %d\\n\", a / b);\n\n    // comparison operators\n    // initial condition, test, increment \n    for (a = 0, b = 5; a &lt; b; a++)\n    {\n        printf(\"a is equal to %d, b is equal to %d, but a is less than b so adding 1 to a.\\n\", a, b);\n    }\n    printf(\"the value of a is %d\\n\", a);\n    a = 0;\n    do\n    {\n        printf(\" a is equal to %d\\n\", a);\n        a++;\n    } while (a &lt; 5);\n\n    // miscellaneous operators\n\n    // ternary operator\n    // condition ? value_if_true : value_if_false\n    a = 10, b = 20;\n    int c;\n    c = (a &lt; b) ? a : b;\n    printf(\"%d\\n\", c); // 10\n\n    // sizeof operator\n    // returns the size of the operand you pass. You can pass a variable, or even a type\n    int age = 37;\n    printf(\"%ld\\n\", sizeof(age));\n    printf(\"%ld\\n\", sizeof(int));\n\n    // operator precedence\n    a = 2, b = 4;\n    c = b + a * a / b - a;\n\n    //\n}\n</code></pre></p>"},{"location":"reference/c-programming/#command-line-arguments","title":"Command-Line Arguments","text":"<p>An example of getting arguments from the command line. <pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n    if(argc == 1) {\n        printf(\"no arguments given on the command-line.\\n\");\n        printf(\"usage: %s &lt;argument1&gt; &lt;argument2&gt; ... &lt;argumentN&gt;\\n\", argv[0]);\n        return 0;\n    }\n    printf(\"argument count: [%d]\\n\", argc);\n\n    for(int i = 0; i &lt; argc; i++) {\n        if(i == 0) {\n            printf(\"executable = [%s]\\n\", argv[i]);\n        } else {\n            printf(\"argument %d = [%s]\\n\", i, argv[i]);\n        }\n    }\n}\n</code></pre></p>"},{"location":"reference/c-programming/#size-of-types","title":"Size of Types","text":"<p>Prints the size of each type. <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"char size: %lu bytes\\n\", sizeof(char));\n    printf(\"int size: %lu bytes\\n\", sizeof(int));\n    printf(\"short size: %lu bytes\\n\", sizeof(short));\n    printf(\"long size: %lu bytes\\n\", sizeof(long));\n    printf(\"float size: %lu bytes\\n\", sizeof(float));\n    printf(\"double size: %lu bytes\\n\", sizeof(double));\n    printf(\"long double size: %lu bytes\\n\", sizeof(long double));\n}\n</code></pre></p>"},{"location":"reference/c-programming/#ask-name","title":"Ask Name","text":"<p>This program will ask for your name and say it back to you. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main (void)\n{\n  char name[15];\n\n  printf(\"Enter your name: \");\n  scanf(\"%s\", name);\n  printf(\"Hello, %s!\\n\", name);\n\n  return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#write-text-to-file","title":"Write Text to File","text":"<p>Simple program which writes text to a specific file on the disk. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void) {\n    char sentence[1000];\n    FILE *fptr;\n\n    // use appropriate location if you're using macos, linux, windows, etc\n    fptr = fopen(\"program.txt\", \"w\");\n\n    // exiting program \n    if (fptr == NULL) {\n        printf(\"Error!\");\n        exit(1);\n    }\n    printf(\"Enter a sentence:\\n\");\n    fgets(sentence, sizeof(sentence), stdin);\n    fprintf(fptr, \"%s\", sentence);\n    fclose(fptr);\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#read-text-from-file","title":"Read Text from File","text":"<p>Simple program which reads text from a file on the disk. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void) {\n    char text[100];\n    FILE *fptr;\n\n    if ((fptr = fopen(\"program.txt\", \"r\")) == NULL) {\n        printf(\"Error opening file!\\n\");\n\n        // Program exits if the file pointer returns null.\n        exit(1);\n    }\n\n    fscanf(fptr, \"%s\", &amp;text);\n\n    printf(\"Value of n = %s\", text);\n    fclose(fptr);\n\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#simple-calculator","title":"Simple Calculator","text":"<p>This is a simple calculator written in C. <pre><code>#include &lt;stdio.h&gt;\n\nint main (int argc, char argv[]) {\n    int arg1, arg2;\n    if (argc == 4)\n    {\n        sscanf (argv[1], \"%d\", &amp;arg1);\n        sscanf (argv[3], \"%d\", &amp;arg2);\n        if (*argv[2] == '+') printf (\"%d\\n\", arg1 + arg2);\n        if (*argv[2] == '-') printf (\"%d\\n\", arg1 - arg2);\n        if (*argv[2] == 'x') printf (\"%d\\n\", arg1 * arg2);\n        if (*argv[2] == '/') printf (\"%d\\n\", arg1 / arg2);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#convert-temperature","title":"Convert Temperature","text":"<p>Converts Celsius to Fahrenheight and vice-versa. <pre><code>#include &lt;stdio.h&gt;\n\n// function prototypes\ndouble celsiusToFahrenheight(double degreesC);\ndouble fahrenheightToCelsius(double degreesF);\n\nint main(void) {\n    int c = 0, f = 32;\n    printf(\"%d Celsius is %d Fahrenheight\\n\", c, (int)celsiusToFahrenheight(c));\n    printf(\"%d Fahrenheight is %d Celsius\\n\\n\", f, (int)fahrenheightToCelsius(f));\n\n    c = 100, f = 212;\n    printf(\"%d Celsius is %d Fahrenheight\\n\", c, (int)celsiusToFahrenheight(c));\n    printf(\"%d Fahrenheight is %d Celsius\\n\\n\", f, (int)fahrenheightToCelsius(f));\n\n    c = f = 50;\n    printf(\"%d Celsius is %d Fahrenheight\\n\", c, (int)celsiusToFahrenheight(c));\n    printf(\"%d Fahrenheight is %d Celsius\\n\\n\", f, (int)fahrenheightToCelsius(f));\n\n    return 0;\n}\n\n// convert celsius to fahrenheight\ndouble celsiusToFahrenheight(double degreesC) {\n    double degreesF = (degreesC * 9 / 5)+ 32;\n    return degreesF;\n}\n\n// convert fahrenheight to celsius\ndouble fahrenheightToCelsius(double degreesF) {\n    double degreesC = (degreesF - 32) * 5 / 9;\n    return degreesC;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#prime-numbers","title":"Prime Numbers","text":"<p>Asks you for a number and checks if it's prime or not. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdbool.h&gt;\n\nbool isPrime(int num);\n\nint main(void) {\n    int num;\n    printf(\"Check if a number is prime.\\nEnter a number: \");\n    scanf(\"%d\", &amp;num);\n    if ((isPrime(num))==true) {\n        printf(\"%d is prime.\\n\", num);\n    } else if ((isPrime(num))==false) {\n        printf(\"%d is not prime.\\n\", num);\n    } else {\n        printf(\"An error occured.\\n\");\n    }\n    return 0;\n}\n\nbool isPrime(int num) {\n    if(num&lt;2) return false;\n    if(num==2) return true;\n\n    bool isPrime=true; //make initial assumption that the number is prime\n    for(int i=2; i&lt;num; i++) {\n        if((num%i)==0) {\n            //we found a divisor of num, so num is not prime.\n            isPrime = false;\n            break; //no need to keep checking, so we can exit the loop.\n        }\n    }\n    return isPrime;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#get-time","title":"Get Time","text":"<p>Gets the current time and date. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n\nint main(void)\n{\n    // variables to store the date and time components\n    int hours, minutes, seconds, day, month, year;\n\n    // set time-type to now\n    time_t now;\n\n    // Obtain current time\n    // `time()` returns the current time of the system as a `time_t` value\n    time(&amp;now);\n\n    // Convert to local time format and print to stdout\n    printf(\"Today is %s\", ctime(&amp;now));\n\n    // localtime converts a `time_t` value to calendar time and\n    // returns a pointer to a `tm` structure with its members\n    // filled with the corresponding values\n    struct tm *local = localtime(&amp;now);\n\n    hours = local-&gt;tm_hour;         // get hours since midnight (0-23)\n    minutes = local-&gt;tm_min;        // get minutes passed after the hour (0-59)\n    seconds = local-&gt;tm_sec;        // get seconds passed after a minute (0-59)\n\n    day = local-&gt;tm_mday;            // get day of month (1 to 31)\n    month = local-&gt;tm_mon + 1;      // get month of year (0 to 11)\n    year = local-&gt;tm_year + 1900;   // get year since 1900\n\n    // print local time\n    if (hours &lt; 12) {    // before midday\n        printf(\"Time is %02d:%02d:%02d am\\n\", hours, minutes, seconds);\n    }\n    else {    // after midday\n        printf(\"Time is %02d:%02d:%02d pm\\n\", hours - 12, minutes, seconds);\n    }\n\n    // print the current date\n    printf(\"Date is: %02d/%02d/%d\\n\", month, day, year);\n\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#leap-year","title":"Leap Year","text":"<p>This program ask for a year, and will tell you if it's a leap year or not. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n\n// function prototypes\nbool isLeapYear(int);\n\nint main(void) {\n    int year;\n\n    printf(\"Determine if a year is a leap year or not.\\n\\n\");\n    printf(\"Enter year: \");\n    scanf(\"%d\", &amp;year);\n\n    /* A simple way of printing the result.\n    if (isLeapYear(year)) {\n        printf(\"%d is a leap year.\\n\");\n    } else {\n        printf(\"%d is not a leap year.\\n\", year);\n    }*/\n\n    // A more C-like version of printing the result\n    printf(\"%d is%sa leap year.\\n\", year, isLeapYear(year) ? \" \" : \" not \");\n\n    return 0;\n}\n\nbool isLeapYear(int year) {\n    bool isLeap = false;\n\n    // Leap years not part of the Gregorian calendar until after 1752.\n    if(year &lt; 1571) // is it before the years it was known?\n        isLeap = false;\n    else if((year % 4) != 0) // year is not a multiple of 4.\n        isLeap = false;\n    else {\n        if((year % 400) == 0)\n            isLeap = true;\n        else if((year % 100) == 0)\n            isLeap = false;\n        else\n            isLeap = true;\n    }\n    return isLeap;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#fibonacci-sequence","title":"Fibonacci Sequence","text":"<p>This program asks how many terms in the Fibonacci sequence you want to print. <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    int numOfTerms, termsPrinted, t1 = 0, t2 = 1, nextTerm = t1 + t2;\n\n    printf(\"print x terms in the fibonacci sequance.\\n\");\n    printf(\"enter how many terms you want: \");\n    scanf(\"%d\", &amp;numOfTerms);\n    printf(\"ok, you want %d terms.\\n\", numOfTerms);\n\n    // printing the first 2 terms so they can be added\n    printf(\"Sequence: %d, %d, \",t1, t2);\n\n    for (termsPrinted = 3; termsPrinted &lt;= numOfTerms; ++termsPrinted) {\n        printf(\"%d, \", nextTerm);\n        t1 = t2;\n        t2 = nextTerm;\n        nextTerm = t1 + t2;\n    }\n}\n</code></pre></p>"},{"location":"reference/c-programming/#quadratic-roots-calculator","title":"Quadratic Roots Calculator","text":"<p>This program will calculate the roots of a standard-form quadratic equation. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main(void) {\n    float a, b, c, d;\n\n    printf(\"standard-form quadratic solver\\n\");\n    printf(\"enter a, b and c: \");\n    scanf(\"%f%f%f\",&amp;a,&amp;b,&amp;c);\n    printf(\"ok, I got 'a = %f', 'b = %f', 'c = %f'. continuing.\\n\", a, b, c);\n\n    // complete the b^2-4ac of the quadratic formula first\n    d = b * b - 4 * a * c;\n\n    if (d &lt; 0) {\n        printf(\"two complex roots found.\\n\");\n        printf(\"%.3f%+.3fi\",-b/(2*a),sqrt(-d)/(2*a));\n        printf(\", %.3f%+.3fi\",-b/(2*a),-sqrt(-d)/(2*a));\n        return 0;\n    } else if (d == 0) {\n        printf(\"one repeated root found.\\n\");\n        printf(\"root: %.3f\\n\", -b / (2 * a));\n        return 0;\n    } else {\n        printf(\"two real roots found\\n\");\n        printf(\"roots: %.3f , %.3f\\n\", (-b + sqrt(d)) / (2 * a), (-b - sqrt(d)) / (d * a));\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#factor-a-number","title":"Factor a Number","text":"<p>Asks for a number and then prints its factors. <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    int numToFactor, i;\n    printf(\"Enter the number you want to factor: \");\n    scanf(\"%d\", &amp;numToFactor);\n    // for loop is iterated until i is false\n    // in each iteration, numToFactor is checked if it is divisible by i.\n    // the condition is for i to be a factor of numToFactor.\n    // then, the value of i is incremented by 1 and the process repeats.\n    for (i = 1; i &lt;= numToFactor; ++i) { // initial condition, test, increment\n        if ((numToFactor % i) == 0) {\n            printf(\"%d \", i);\n        }\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"reference/c-programming/#exam-grade-calculator","title":"Exam Grade Calculator","text":"<p>Calculate target final exam grade from user-input quarter grades. Assumes exam is weighted at 20%. <pre><code>#include &lt;stdio.h&gt;\n\nfloat findQuarterlyAverage(int QuarterCount, float quarterScores[]);\n\nfloat sum = 0;\nfloat QuarterlyAverage;\n\nint main(void) {\n\n    int i, QuarterCount, finalExamWeight;\n\n    // calculate average\n    printf(\"[?] How many quarter grades would you like to average? \");\n    scanf(\"%i\", &amp;QuarterCount);\n    float quarterScores[QuarterCount];\n    float testVar = findQuarterlyAverage(QuarterCount, quarterScores);\n    printf(\"[*] Average of %i quarters before final is %.3f\\n\", QuarterCount, testVar);\n\n    float GoalA, GoalB, GoalC, GoalD;\n\n    GoalA = (5 * 90) - (4 * testVar);\n    GoalB = (5 * 80) - (4 * testVar);\n    GoalC = (5 * 70) - (4 * testVar);\n    GoalD = (5 * 60) - (4 * testVar);\n\n    // print everything\n    printf(\"\\n\");\n    printf(\"To get an A\\tTo get a B\\tTo get a C\\tTo get a D\\n\");\n    printf(\"%.3f       \\t%.3f      \\t%.3f      \\t%.3f      \\n\", GoalA, GoalB, GoalC, GoalD);\n}\n\nfloat findQuarterlyAverage(int QuarterCount, float quarterScores[]) {\n\n    // get user's scores\n    for (int i = 0; i &lt; QuarterCount; i++) {\n        printf(\"    [?] Enter quarter %i score: \", i + 1);\n        scanf(\"%f\", &amp;quarterScores[i]);\n    }\n\n    // find total of all values in the array\n    for (int i = (QuarterCount - 1); i &gt;=0; i--) {\n        sum = sum + quarterScores[i];\n    }\n\n    // find the actual average\n    float QuarterlyAverage = sum / (int)QuarterCount;\n\n    return QuarterlyAverage;\n}\n</code></pre></p>"},{"location":"reference/links/","title":"Links","text":""},{"location":"reference/links/#links","title":"Links","text":"<ul> <li>To-Do List: https://ryanfortner.github.io/todolist/</li> <li>Invuedious: https://ryanfortner.github.io/invuedious/</li> <li>Pi-Apps AARCH64 nodes:<ul> <li>Node1: https://node1.pi-apps.io</li> <li>Node2: https://node2.pi-apps.io</li> </ul> </li> </ul>"}]}